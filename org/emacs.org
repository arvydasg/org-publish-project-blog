#+title: Emacs
#+date: [2023-12-13 Wed]
#+STARTUP:    overview
#+OPTIONS: toc:t num:nil ^:nil ':t

This is emacs config stuff

* Why I am using emacs

- According to Zygimantas, most developers WILL be running linux at
  work, so dont fall for windows os
- FOREVER notes, simple org files, text, so notes will forever be
  there(<2023-11-26 Sun> started using denote.
- Torstein - The drive you have to always improve your tools and
  workflow will take you and your career great places
- I guess in some older companies where security (of all kinds) is an
  actual issue, they mandate that everyone works through a VM, hosted
  remotely. And when whatever you’re using to visually connect to the
  VM lags, and the VM itself is pretty slow, and you have 10 people
  near you connecting to the same router, it becomes a ridiculous pain
  to use an IDE.
- Most flexible and configurable editor in the multiverse. I’m not
  even close to joking
- [[https://www.reddit.com/r/emacs/comments/z9u6c1/my_experience_with_emacs_and_the_eventual/?utm_source=share&utm_medium=android_app&utm_name=androidcss&utm_term=1&utm_content=share_button][emacs till the day I die due to magit]]


Why I should not use emacs:

Dienoraščio tiesiog rašymas: Užima daug laiko, bet naudos nedaug
long-term. Visą gyvenimą greičiausiai nenaudociau jo vis tiek, o ir po
10 metu kas iš to, kad galėsiu paskaityti ką šiandien veikiau.. tam
yra memories, atmintis, fotkes ir pan. Geriau tegul tavo darbai šneka
jei dienorastukas. Ir realiai, beveik niekados aš to dienoraščio
neatsidarau. O jeigu ir atsidarau, nelabai ten ką skaitau... Kasdien
galvoti, kad reikia prisėsti, reikia užsirašyti notes I žurnalą.. ne
ačiū.

Coding environment - geras ir pycharm. Su emacs kad keybindijgs ir
nice, užima daug laiko, kol susisetupini. Ir susisetupinus - mėgini
vėliau daugiau tweakinti tą environment nei koduoti.. imk įrankį,
naudok koks jis yra ir tiek. Va kaip vim kelis bindings pasidariau,
kad būtų patogu naršyti - to ir užtenka +-, ne?

Agenda - labai retai naudoju. Useful nebent susirasyti ko žmonėm
reikia, ką jiem pirkti ir pan. Bet ne pati agenda.. retai ją sekų.

Gal būt po GitHub repositorijomis viską rašytis. Ir docs ir rodos ir
pan?

Nu kadangi org mode galima turėti export to md ar tiesiog rašyti
tiesiogiai su org mode - tai proves, jog tai yra populiaru among
developers. Tai gal 100% neatsisakyk emacs,bet pasiribok. Jokių todos,
jokių epics. Tik notes? Idk blt.

Emacs configuration only once a week. Tam tikrą dieną, tam tikrą kiekį
valandų. Ir psio.

Vim + tmux?

Emacs and being able to change/modify/tweak things to be like I want,
create the functionality that I want - is of the reason is why I
became a programmer.

* Manuall installing packages from git

useful when you can not reach elpa/melpa repositories, for example -
at work.

video showcasing that -
https://www.youtube.com/watch?v=at_fACZ_o9Q&ab_channel=TimothyUnkert

* login to another server over ssh

#+begin_src bash
  /ssh:remote-user@remote.box:/path/to/my/file
#+end_src

will be prompted for password n stuff

* images in org files

Okay, so to display inline images you can click 'C-c C-x C-v'

*If you have the image with you:*

To insert an image, do C-u then C-c C-l. easy. if you add a
description, it won't show the image, but rather the description with
an indication of a link.

*If you don't have - use org-download*

M-x org-download-screenshot

then make sure in init file you have specified the directory. If not, it will
save images in your current org file directory. It is good if you want to
export the file to html later and then maybe even send to someone.

** resizing images in emacs and html

add this to your init:

#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src

then, above EACH and EVERY image add such thingies:

#+begin_src org
#+attr_html: :width 900px
#+ATTR_ORG: :width 600
[[file:images/smutifruti.png]]
#+end_src

and now after C-c C-x C-v - images will display nicely, as per your
request. beautiful
* Blog in emacs

There are multiple ways to blog with emacs

In all ways - to deploy to github, must have index.html in the directory! Other
wise git will not know what to serve. Can use special symbols(bottom of the
page - https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html)

#+begin_src emacs-lisp
  (setq org-publish-project-alist
        '(
          ("my-org-site"
           :base-directory "/home/nixos/GIT/org-publish/org/" ;tells Org the folder of files that we want to publish to HTML
           :publishing-directory "/home/nixos/GIT/org-publish/html/" ;configures the output folder for all published files
           :base-extension "org"
           :publishing-function org-html-publish-to-html ;tells Org that we want to publish the files as HTML
           :recursive t			;tells Org to publish .org files under all subdirectories of :base-directory
           :with-author nil           ; Don't include author name
           :with-creator t            ; Include Emacs and Org versions in footer
           :with-toc t                ; Include a table of contents
           :section-numbers nil       ; Don't include section numbers
           :time-stamp-file nil    ; Don't include time stamp in file
           :auto-sitemap t			;creates sitemap, a place with all the links
           )
          ("build-site.el" :components ("my-org-site"))))
#+end_src

** simple export with C-c C-e h o

*** what is org-export-html

Built in Emacs export posibility. Html export is just one of the options.

*** How to use it

=C-e h h= command exports .org file without ANY additional settings. It is just
built in Emacs behavior.

Can try it out with such page:

#+begin_src org
  ,* Intro

  ,* Body

  ,** First attempts

  I was trying to do the same with my journey to programming. It started
  a bit more than a year ago and since them I was trying to create
  personal blog/website.

  - First with php - [[https://github.com/arvydasg/gvazdikelis][gvazdikelis]]
  - Then with hugo - [[https://github.com/arvydasg/arvydas.dev_hugo][arvydas.dev_hugo]]
  - Finally with django - [[https://github.com/arvydasg/django_blog][django_blog]]

  ,* Current setup

  [2022-04-17 Sk] I discovered a way to make a website with emacs.
  [[https://systemcrafters.net/publishing-websites-with-org-mode/][Systemcrafters channel]] has a lot of great material covering just that.

  I knew that this is the right way for me to blog, because:

  - I can use my emacs shortcuts to write and edit
  - I don’t need to reformat text to make it readable for something like
    CKEditor in python [[https://github.com/arvydasg/emacs_blog][django]]. I can just straight up use emacs source
    blocks, headings, text blocks and so on and everything just works,
  - I can publish my blog just as easily wit [[https://magit.vc/][Magit]], push straight to
    Github and the changes will be visible immediately in my website,

  ,* Summary

  For me, this is the fastest way to blog. I will be using it in the
  future and hopefully improve my workflow as I go along.

  P.S. Update 2022-08-29. I am creating a hugo blog - AGAIN. Read why -
  [[https://github.com/arvydasg/emacs_blog][here]].
#+end_src

*** How to extend it

For "Codeacademy" project, for when I was taking notes for it, I added
additional configuration that you see below to make the site look nicer and add
additional functionality.

**** My org file looks like so:

#+begin_src org
  ,#+title: Attempts to Blog
  ,#+date: <2022-06-19 20:04>
  ,#+description:
  ,#+filetags: emacs python

  ,#+attr_html: :width 1200px
  ,#+ATTR_ORG: :width 600
  [[./static/images/emacsblog.png]]

  ,* Intro

  ,* Body

  ,** First attempts

  I was trying to do the same with my journey to programming. It started
  a bit more than a year ago and since them I was trying to create
  personal blog/website.

  - First with php - [[https://github.com/arvydasg/gvazdikelis][gvazdikelis]]
  - Then with hugo - [[https://github.com/arvydasg/arvydas.dev_hugo][arvydas.dev_hugo]]
  - Finally with django - [[https://github.com/arvydasg/django_blog][django_blog]]

  ,* Current setup

  [2022-04-17 Sk] I discovered a way to make a website with emacs.
  [[https://systemcrafters.net/publishing-websites-with-org-mode/][Systemcrafters channel]] has a lot of great material covering just that.

  I knew that this is the right way for me to blog, because:

  - I can use my emacs shortcuts to write and edit
  - I don’t need to reformat text to make it readable for something like
    CKEditor in python [[https://github.com/arvydasg/emacs_blog][django]]. I can just straight up use emacs source
    blocks, headings, text blocks and so on and everything just works,
  - I can publish my blog just as easily wit [[https://magit.vc/][Magit]], push straight to
    Github and the changes will be visible immediately in my website,

  ,* Summary

  For me, this is the fastest way to blog. I will be using it in the
  future and hopefully improve my workflow as I go along.

  P.S. Update 2022-08-29. I am creating a hugo blog - AGAIN. Read why -
  [[https://github.com/arvydasg/emacs_blog][here]].

#+end_src

**** The extension with org-html-head/preamble/postamble

The code below adds navigation right after the opening <body> tag and some js
right before the closing </body> tag.

<head> html content is added from within the org file, dont forget to change
the “title” and “content” the file.

#+begin_src emacs-lisp
  ;; leaving this content to be in specific org files instead

  ;; (setq org-html-head
  ;;       (concat
  ;;        "<head>\n"
  ;;        "<meta charset=\"UTF-8\">\n"
  ;;        "<meta name=\"description\" content=\"CodeAcademy Python notes\">\n"
  ;;        "<link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://arvydasg.github.io/rss.xml\" title=\"RSS feed for https://arvydasg.github.io/\">\n"
  ;;        "<title>CodeAcademy Databases</title>\n"
  ;;        "<!-- Google Tag Manager -->\n"
  ;;        "<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0], j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src= 'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f); })(window,document,'script','dataLayer','GTM-MC4ZQHP');</script>\n"
  ;;        "<!-- End Google Tag Manager -->\n"
  ;;        "<meta name=\"author\" content=\"Arvydas Gasparavicius\">\n"
  ;;        "<meta name=\"referrer\" content=\"no-referrer\">\n"
  ;;        "<meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\">\n"
  ;;        "<link href=\"../readtheorg.css\" rel=\"stylesheet\" type=\"text/css\" />\n"
  ;;        "<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\" />\n"
  ;;        "<script src=\"static/lightbox.js\"></script>\n"
  ;;        "<script src=\"static/auto-render.min.js\"></script>\n"
  ;;        "<link rel=\"icon\" href=\"static/ag.ico\">\n"
  ;;        "</head>\n"
  ;;        ))

  (setq org-html-preamble
        (concat
         "<body>\n"
         "
  <!-- Google Tag Manager (noscript) -->
      <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-MC4ZQHP\"
                        height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>
      <!-- End Google Tag Manager (noscript) -->
      <nav class=\"text-center navbar navbar-expand-lg navbar-light bg-light\">
              <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">
                  <span class=\"navbar-toggler-icon\"></span>
              </button>
              <div style=\"justify-content:center\" class=\"collapse navbar-collapse \" id=\"navbarNav\">
                  <ul class=\"navbar-nav\">
                      <li class=\"nav-item\">
                          <a class=\"nav-link\" href=\"https://arvydas.dev/codeacademy/\">Home <span class=\"sr-only\">(current)</span></a>
                      </li>
                      <li class=\"nav-item\">
                          <a class=\"nav-link\" href=\"https://arvydas.dev/codeacademy/html_css/index.html\">HTML/CSS</a>
                      </li>
                      <li class=\"nav-item\">
                          <a class=\"nav-link\" href=\"https://arvydas.dev/codeacademy/javascript/index.html\">JavaScript</a>
                      </li>
                      <li class=\"nav-item\">
                          <a class=\"nav-link \" href=\"https://arvydas.dev/codeacademy/python/index.html\">Python</a>
                      </li>
                      <li class=\"nav-item\">
                          <a class=\"nav-link active \" href=\"https://arvydas.dev/codeacademy/databases/index.html\">Databases</a>
                      </li>
                      <li class=\"nav-item\">
                          <a class=\"nav-link \" href=\"https://arvydas.dev/codeacademy/flask/index.html\">Flask</a>
                      </li>
                  </ul>
              </div>
      </nav>"
         ))

  (setq org-html-postamble
        (concat
         "<!-- bootstrap scripts -->\n"
         "<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n"
         "        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n"
         "        crossorigin=\"anonymous\"></script>\n"
         "<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js\"\n"
         "        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n"
         "        crossorigin=\"anonymous\"></script>\n"
         "<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\"\n"
         "        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n"
         "        crossorigin=\"anonymous\"></script>\n"
         "<button onclick=\"topFunction()\" id=\"myBtn\" title=\"Go to top\">Top</button>\n"
         "<script src=\"../scripts.js\"></script>\n"
         "</body>\n"
         "</html>\n"
         ))

#+end_src

*** Limitations

- no tags
- exports in the same folder
- if multiple files have changes - run the export for multiple files. too much
  hassle.


*** PROS
- no dependencies, can do anywhere
- built in

*** CONS
- can't export more than one file
- unclear about links, have not tried, but probs dont work

** ox-publish C-c C-e P p

Can do basic batch export with header, footer, no need to use additional package.

More info here how it could be built from PKC times -
https://github.com/arvydasg/PKC_AFK/tree/main/AFK/src/pkcwiki

and from this guy's video -
https://www.youtube.com/watch?v=Elynmb3kTE4&ab_channel=ChrisMaiorana

and official docs -
https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html

if the org file has not changed and you have deleted the html file and you try
to publish project again - it will say that the file is unmodified and will not
export to html. What we do then, we can forcefully publish it by setting a
prefix in org dispacher:

#+begin_quote
The export dispatcher, which you can summon with C-c C-e in the Org mode,
provides the relevant "Force publishing" option under C-f. Thus, to
force-publish the current file, type C-c C-e C-f P f.
#+end_quote

It will then publish ALL the files once again?

note(look for prefix) - https://orgmode.org/guide/Publishing.html#Publishing,
similar here also -
https://stackoverflow.com/questions/21258769/using-emacs-org-mode-how-to-publish-the-unchanged-files-in-a-project

can actually make links with C-c C-l to file, that's good.

you can also create a script instead of going the default way. explain why its
good and how to do  both ways.

script - dont export when link problems, nicer preview, logs, see what has been
done. no need to use the menus etc.

Check the docs for more options here -
[[help:org-publish-project-alist][org-publish-project-alist]] docs

*** PROS
- can work with multiple projects
- each project can be specified in a separate config
- built in
- many options to customise the site
- worked in pkc, should work for me now also

*** CONS
- links don't work

** org-static-blog-publish

*** PROS
- does everything for you
- tags
- archives
- rss feed
- especially good for blogs, but for other things - overkill?

*** CONS
- big program(installable package, not built in)
- links don't work
- can't handle multiple projects
** weblorg?

David tried -
https://www.youtube.com/watch?v=5R7ad5xz5wo&t=5746s&ab_channel=SystemCrafters

** How I am using denote

Denote allows me to generate blog files quick and easy. They are all in the
same structure, do not require databse. I can link between them.

maybe silo could be a separate note?

Default denote dir is Documents/org, but my denote dir is ~/GIT/notes. This is
where ALL my notes used to lie. When I decided to move the programming/work
related notes to a different directory, I had to make a "silo" in denote
terms - as described in https://protesilaos.com/emacs/denote.

instead of denote looking at my default denote dir when I create and manage
denote files, I had to specify another directory. I could do that by simply
creating a =.dir-locals.el= file in my new directory and add such content to
it:

#+begin_src emacs-lisp
  ;;; Directory Local Variables.  For more information evaluate:
  ;;;
  ;;;     (info "(emacs) Directory Variables")

  ((nil . ((denote-directory . default-directory))))
#+end_src

so now when denote is launched from THAT particular folder in which there is
this dir-locals.el file, it will know that It has to create notes in that
directory and not the default directory which I have specified in my init file,
which contains all my personal files.


* Errors
** seq keep error message

https://emacs.stackexchange.com/questions/78977/seq-keep-is-void-when-installing-magit-through-use-package

should install emacs 29 bla

** perspective and denote conflict

I just figured out projectile and how cool is it, I can have a similar behavior
like tmux or default window os window management.

But the problem is when I create perspective frames and in those frames there
is at least one denote file. That frame does not get saved. Why? Because denote
purposfully by default renames it's buffers not to contain all the jibberish
like date when it was created, tag names and so on with this function -
=denote-rename-buffer-mode=.

Instead of such filename:

- 20231209T181842--perspective-and-denote-conflict__emacs.org

it renames it to:

- perspective and denote conflict

And when you save in perspective the name of the buffer, it gets saved as this
short version which AFTER we try to open the saved perspective - it does not
find such filename, because it simply does not exist.

Nice I am happy that I could figure this out.

Let's try to change that variable and see if it helps.

Denote docs - [[https://protesilaos.com/emacs/denote#h:3ca4db16-8f26-4d7d-b748-bac48ae32d69][10. Automatically rename Denote buffers]]

#+begin_src emacs-lisp
  (denote-rename-buffer-mode -1)
#+end_src

It did help!!! I am a magician!!
